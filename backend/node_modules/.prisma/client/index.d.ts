
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Assessment
 * 
 */
export type Assessment = $Result.DefaultSelection<Prisma.$AssessmentPayload>
/**
 * Model Finding
 * 
 */
export type Finding = $Result.DefaultSelection<Prisma.$FindingPayload>
/**
 * Model ExploitResult
 * 
 */
export type ExploitResult = $Result.DefaultSelection<Prisma.$ExploitResultPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Assessments
 * const assessments = await prisma.assessment.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Assessments
   * const assessments = await prisma.assessment.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.assessment`: Exposes CRUD operations for the **Assessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assessments
    * const assessments = await prisma.assessment.findMany()
    * ```
    */
  get assessment(): Prisma.AssessmentDelegate<ExtArgs>;

  /**
   * `prisma.finding`: Exposes CRUD operations for the **Finding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Findings
    * const findings = await prisma.finding.findMany()
    * ```
    */
  get finding(): Prisma.FindingDelegate<ExtArgs>;

  /**
   * `prisma.exploitResult`: Exposes CRUD operations for the **ExploitResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExploitResults
    * const exploitResults = await prisma.exploitResult.findMany()
    * ```
    */
  get exploitResult(): Prisma.ExploitResultDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Assessment: 'Assessment',
    Finding: 'Finding',
    ExploitResult: 'ExploitResult'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "assessment" | "finding" | "exploitResult"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Assessment: {
        payload: Prisma.$AssessmentPayload<ExtArgs>
        fields: Prisma.AssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssessmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssessmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          findFirst: {
            args: Prisma.AssessmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssessmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          findMany: {
            args: Prisma.AssessmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>[]
          }
          create: {
            args: Prisma.AssessmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          createMany: {
            args: Prisma.AssessmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssessmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>[]
          }
          delete: {
            args: Prisma.AssessmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          update: {
            args: Prisma.AssessmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          deleteMany: {
            args: Prisma.AssessmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssessmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssessmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          aggregate: {
            args: Prisma.AssessmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssessment>
          }
          groupBy: {
            args: Prisma.AssessmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssessmentCountArgs<ExtArgs>
            result: $Utils.Optional<AssessmentCountAggregateOutputType> | number
          }
        }
      }
      Finding: {
        payload: Prisma.$FindingPayload<ExtArgs>
        fields: Prisma.FindingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FindingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FindingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FindingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FindingPayload>
          }
          findFirst: {
            args: Prisma.FindingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FindingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FindingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FindingPayload>
          }
          findMany: {
            args: Prisma.FindingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FindingPayload>[]
          }
          create: {
            args: Prisma.FindingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FindingPayload>
          }
          createMany: {
            args: Prisma.FindingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FindingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FindingPayload>[]
          }
          delete: {
            args: Prisma.FindingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FindingPayload>
          }
          update: {
            args: Prisma.FindingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FindingPayload>
          }
          deleteMany: {
            args: Prisma.FindingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FindingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FindingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FindingPayload>
          }
          aggregate: {
            args: Prisma.FindingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFinding>
          }
          groupBy: {
            args: Prisma.FindingGroupByArgs<ExtArgs>
            result: $Utils.Optional<FindingGroupByOutputType>[]
          }
          count: {
            args: Prisma.FindingCountArgs<ExtArgs>
            result: $Utils.Optional<FindingCountAggregateOutputType> | number
          }
        }
      }
      ExploitResult: {
        payload: Prisma.$ExploitResultPayload<ExtArgs>
        fields: Prisma.ExploitResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExploitResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExploitResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExploitResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExploitResultPayload>
          }
          findFirst: {
            args: Prisma.ExploitResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExploitResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExploitResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExploitResultPayload>
          }
          findMany: {
            args: Prisma.ExploitResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExploitResultPayload>[]
          }
          create: {
            args: Prisma.ExploitResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExploitResultPayload>
          }
          createMany: {
            args: Prisma.ExploitResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExploitResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExploitResultPayload>[]
          }
          delete: {
            args: Prisma.ExploitResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExploitResultPayload>
          }
          update: {
            args: Prisma.ExploitResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExploitResultPayload>
          }
          deleteMany: {
            args: Prisma.ExploitResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExploitResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExploitResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExploitResultPayload>
          }
          aggregate: {
            args: Prisma.ExploitResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExploitResult>
          }
          groupBy: {
            args: Prisma.ExploitResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExploitResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExploitResultCountArgs<ExtArgs>
            result: $Utils.Optional<ExploitResultCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AssessmentCountOutputType
   */

  export type AssessmentCountOutputType = {
    findings: number
    exploitResults: number
  }

  export type AssessmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    findings?: boolean | AssessmentCountOutputTypeCountFindingsArgs
    exploitResults?: boolean | AssessmentCountOutputTypeCountExploitResultsArgs
  }

  // Custom InputTypes
  /**
   * AssessmentCountOutputType without action
   */
  export type AssessmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentCountOutputType
     */
    select?: AssessmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssessmentCountOutputType without action
   */
  export type AssessmentCountOutputTypeCountFindingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FindingWhereInput
  }

  /**
   * AssessmentCountOutputType without action
   */
  export type AssessmentCountOutputTypeCountExploitResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExploitResultWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Assessment
   */

  export type AggregateAssessment = {
    _count: AssessmentCountAggregateOutputType | null
    _avg: AssessmentAvgAggregateOutputType | null
    _sum: AssessmentSumAggregateOutputType | null
    _min: AssessmentMinAggregateOutputType | null
    _max: AssessmentMaxAggregateOutputType | null
  }

  export type AssessmentAvgAggregateOutputType = {
    totalTests: number | null
    vulnerabilities: number | null
    securityScore: number | null
  }

  export type AssessmentSumAggregateOutputType = {
    totalTests: number | null
    vulnerabilities: number | null
    securityScore: number | null
  }

  export type AssessmentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    targetName: string | null
    targetDescription: string | null
    status: string | null
    systemAnalysis: string | null
    totalTests: number | null
    vulnerabilities: number | null
    securityScore: number | null
    vulnerabilityReport: string | null
    riskLevel: string | null
    executionTime: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssessmentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    targetName: string | null
    targetDescription: string | null
    status: string | null
    systemAnalysis: string | null
    totalTests: number | null
    vulnerabilities: number | null
    securityScore: number | null
    vulnerabilityReport: string | null
    riskLevel: string | null
    executionTime: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssessmentCountAggregateOutputType = {
    id: number
    userId: number
    targetName: number
    targetDescription: number
    status: number
    systemAnalysis: number
    totalTests: number
    vulnerabilities: number
    securityScore: number
    vulnerabilityReport: number
    riskLevel: number
    executionTime: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssessmentAvgAggregateInputType = {
    totalTests?: true
    vulnerabilities?: true
    securityScore?: true
  }

  export type AssessmentSumAggregateInputType = {
    totalTests?: true
    vulnerabilities?: true
    securityScore?: true
  }

  export type AssessmentMinAggregateInputType = {
    id?: true
    userId?: true
    targetName?: true
    targetDescription?: true
    status?: true
    systemAnalysis?: true
    totalTests?: true
    vulnerabilities?: true
    securityScore?: true
    vulnerabilityReport?: true
    riskLevel?: true
    executionTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssessmentMaxAggregateInputType = {
    id?: true
    userId?: true
    targetName?: true
    targetDescription?: true
    status?: true
    systemAnalysis?: true
    totalTests?: true
    vulnerabilities?: true
    securityScore?: true
    vulnerabilityReport?: true
    riskLevel?: true
    executionTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssessmentCountAggregateInputType = {
    id?: true
    userId?: true
    targetName?: true
    targetDescription?: true
    status?: true
    systemAnalysis?: true
    totalTests?: true
    vulnerabilities?: true
    securityScore?: true
    vulnerabilityReport?: true
    riskLevel?: true
    executionTime?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assessment to aggregate.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assessments
    **/
    _count?: true | AssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssessmentMaxAggregateInputType
  }

  export type GetAssessmentAggregateType<T extends AssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssessment[P]>
      : GetScalarType<T[P], AggregateAssessment[P]>
  }




  export type AssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentWhereInput
    orderBy?: AssessmentOrderByWithAggregationInput | AssessmentOrderByWithAggregationInput[]
    by: AssessmentScalarFieldEnum[] | AssessmentScalarFieldEnum
    having?: AssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssessmentCountAggregateInputType | true
    _avg?: AssessmentAvgAggregateInputType
    _sum?: AssessmentSumAggregateInputType
    _min?: AssessmentMinAggregateInputType
    _max?: AssessmentMaxAggregateInputType
  }

  export type AssessmentGroupByOutputType = {
    id: string
    userId: string
    targetName: string
    targetDescription: string | null
    status: string
    systemAnalysis: string | null
    totalTests: number
    vulnerabilities: number
    securityScore: number | null
    vulnerabilityReport: string | null
    riskLevel: string | null
    executionTime: string | null
    createdAt: Date
    updatedAt: Date
    _count: AssessmentCountAggregateOutputType | null
    _avg: AssessmentAvgAggregateOutputType | null
    _sum: AssessmentSumAggregateOutputType | null
    _min: AssessmentMinAggregateOutputType | null
    _max: AssessmentMaxAggregateOutputType | null
  }

  type GetAssessmentGroupByPayload<T extends AssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], AssessmentGroupByOutputType[P]>
        }
      >
    >


  export type AssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    targetName?: boolean
    targetDescription?: boolean
    status?: boolean
    systemAnalysis?: boolean
    totalTests?: boolean
    vulnerabilities?: boolean
    securityScore?: boolean
    vulnerabilityReport?: boolean
    riskLevel?: boolean
    executionTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    findings?: boolean | Assessment$findingsArgs<ExtArgs>
    exploitResults?: boolean | Assessment$exploitResultsArgs<ExtArgs>
    _count?: boolean | AssessmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessment"]>

  export type AssessmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    targetName?: boolean
    targetDescription?: boolean
    status?: boolean
    systemAnalysis?: boolean
    totalTests?: boolean
    vulnerabilities?: boolean
    securityScore?: boolean
    vulnerabilityReport?: boolean
    riskLevel?: boolean
    executionTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["assessment"]>

  export type AssessmentSelectScalar = {
    id?: boolean
    userId?: boolean
    targetName?: boolean
    targetDescription?: boolean
    status?: boolean
    systemAnalysis?: boolean
    totalTests?: boolean
    vulnerabilities?: boolean
    securityScore?: boolean
    vulnerabilityReport?: boolean
    riskLevel?: boolean
    executionTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    findings?: boolean | Assessment$findingsArgs<ExtArgs>
    exploitResults?: boolean | Assessment$exploitResultsArgs<ExtArgs>
    _count?: boolean | AssessmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssessmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assessment"
    objects: {
      findings: Prisma.$FindingPayload<ExtArgs>[]
      exploitResults: Prisma.$ExploitResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      targetName: string
      targetDescription: string | null
      status: string
      systemAnalysis: string | null
      totalTests: number
      vulnerabilities: number
      securityScore: number | null
      vulnerabilityReport: string | null
      riskLevel: string | null
      executionTime: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["assessment"]>
    composites: {}
  }

  type AssessmentGetPayload<S extends boolean | null | undefined | AssessmentDefaultArgs> = $Result.GetResult<Prisma.$AssessmentPayload, S>

  type AssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssessmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssessmentCountAggregateInputType | true
    }

  export interface AssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assessment'], meta: { name: 'Assessment' } }
    /**
     * Find zero or one Assessment that matches the filter.
     * @param {AssessmentFindUniqueArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssessmentFindUniqueArgs>(args: SelectSubset<T, AssessmentFindUniqueArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Assessment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssessmentFindUniqueOrThrowArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssessmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Assessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentFindFirstArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssessmentFindFirstArgs>(args?: SelectSubset<T, AssessmentFindFirstArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Assessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentFindFirstOrThrowArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssessmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Assessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assessments
     * const assessments = await prisma.assessment.findMany()
     * 
     * // Get first 10 Assessments
     * const assessments = await prisma.assessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assessmentWithIdOnly = await prisma.assessment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssessmentFindManyArgs>(args?: SelectSubset<T, AssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Assessment.
     * @param {AssessmentCreateArgs} args - Arguments to create a Assessment.
     * @example
     * // Create one Assessment
     * const Assessment = await prisma.assessment.create({
     *   data: {
     *     // ... data to create a Assessment
     *   }
     * })
     * 
     */
    create<T extends AssessmentCreateArgs>(args: SelectSubset<T, AssessmentCreateArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Assessments.
     * @param {AssessmentCreateManyArgs} args - Arguments to create many Assessments.
     * @example
     * // Create many Assessments
     * const assessment = await prisma.assessment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssessmentCreateManyArgs>(args?: SelectSubset<T, AssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assessments and returns the data saved in the database.
     * @param {AssessmentCreateManyAndReturnArgs} args - Arguments to create many Assessments.
     * @example
     * // Create many Assessments
     * const assessment = await prisma.assessment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assessments and only return the `id`
     * const assessmentWithIdOnly = await prisma.assessment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssessmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Assessment.
     * @param {AssessmentDeleteArgs} args - Arguments to delete one Assessment.
     * @example
     * // Delete one Assessment
     * const Assessment = await prisma.assessment.delete({
     *   where: {
     *     // ... filter to delete one Assessment
     *   }
     * })
     * 
     */
    delete<T extends AssessmentDeleteArgs>(args: SelectSubset<T, AssessmentDeleteArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Assessment.
     * @param {AssessmentUpdateArgs} args - Arguments to update one Assessment.
     * @example
     * // Update one Assessment
     * const assessment = await prisma.assessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssessmentUpdateArgs>(args: SelectSubset<T, AssessmentUpdateArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Assessments.
     * @param {AssessmentDeleteManyArgs} args - Arguments to filter Assessments to delete.
     * @example
     * // Delete a few Assessments
     * const { count } = await prisma.assessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssessmentDeleteManyArgs>(args?: SelectSubset<T, AssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assessments
     * const assessment = await prisma.assessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssessmentUpdateManyArgs>(args: SelectSubset<T, AssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Assessment.
     * @param {AssessmentUpsertArgs} args - Arguments to update or create a Assessment.
     * @example
     * // Update or create a Assessment
     * const assessment = await prisma.assessment.upsert({
     *   create: {
     *     // ... data to create a Assessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assessment we want to update
     *   }
     * })
     */
    upsert<T extends AssessmentUpsertArgs>(args: SelectSubset<T, AssessmentUpsertArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Assessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentCountArgs} args - Arguments to filter Assessments to count.
     * @example
     * // Count the number of Assessments
     * const count = await prisma.assessment.count({
     *   where: {
     *     // ... the filter for the Assessments we want to count
     *   }
     * })
    **/
    count<T extends AssessmentCountArgs>(
      args?: Subset<T, AssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssessmentAggregateArgs>(args: Subset<T, AssessmentAggregateArgs>): Prisma.PrismaPromise<GetAssessmentAggregateType<T>>

    /**
     * Group by Assessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssessmentGroupByArgs['orderBy'] }
        : { orderBy?: AssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assessment model
   */
  readonly fields: AssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    findings<T extends Assessment$findingsArgs<ExtArgs> = {}>(args?: Subset<T, Assessment$findingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FindingPayload<ExtArgs>, T, "findMany"> | Null>
    exploitResults<T extends Assessment$exploitResultsArgs<ExtArgs> = {}>(args?: Subset<T, Assessment$exploitResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExploitResultPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Assessment model
   */ 
  interface AssessmentFieldRefs {
    readonly id: FieldRef<"Assessment", 'String'>
    readonly userId: FieldRef<"Assessment", 'String'>
    readonly targetName: FieldRef<"Assessment", 'String'>
    readonly targetDescription: FieldRef<"Assessment", 'String'>
    readonly status: FieldRef<"Assessment", 'String'>
    readonly systemAnalysis: FieldRef<"Assessment", 'String'>
    readonly totalTests: FieldRef<"Assessment", 'Int'>
    readonly vulnerabilities: FieldRef<"Assessment", 'Int'>
    readonly securityScore: FieldRef<"Assessment", 'Float'>
    readonly vulnerabilityReport: FieldRef<"Assessment", 'String'>
    readonly riskLevel: FieldRef<"Assessment", 'String'>
    readonly executionTime: FieldRef<"Assessment", 'String'>
    readonly createdAt: FieldRef<"Assessment", 'DateTime'>
    readonly updatedAt: FieldRef<"Assessment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Assessment findUnique
   */
  export type AssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where: AssessmentWhereUniqueInput
  }

  /**
   * Assessment findUniqueOrThrow
   */
  export type AssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where: AssessmentWhereUniqueInput
  }

  /**
   * Assessment findFirst
   */
  export type AssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assessments.
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assessments.
     */
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }

  /**
   * Assessment findFirstOrThrow
   */
  export type AssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assessments.
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assessments.
     */
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }

  /**
   * Assessment findMany
   */
  export type AssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessments to fetch.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assessments.
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }

  /**
   * Assessment create
   */
  export type AssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Assessment.
     */
    data: XOR<AssessmentCreateInput, AssessmentUncheckedCreateInput>
  }

  /**
   * Assessment createMany
   */
  export type AssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assessments.
     */
    data: AssessmentCreateManyInput | AssessmentCreateManyInput[]
  }

  /**
   * Assessment createManyAndReturn
   */
  export type AssessmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Assessments.
     */
    data: AssessmentCreateManyInput | AssessmentCreateManyInput[]
  }

  /**
   * Assessment update
   */
  export type AssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Assessment.
     */
    data: XOR<AssessmentUpdateInput, AssessmentUncheckedUpdateInput>
    /**
     * Choose, which Assessment to update.
     */
    where: AssessmentWhereUniqueInput
  }

  /**
   * Assessment updateMany
   */
  export type AssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assessments.
     */
    data: XOR<AssessmentUpdateManyMutationInput, AssessmentUncheckedUpdateManyInput>
    /**
     * Filter which Assessments to update
     */
    where?: AssessmentWhereInput
  }

  /**
   * Assessment upsert
   */
  export type AssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Assessment to update in case it exists.
     */
    where: AssessmentWhereUniqueInput
    /**
     * In case the Assessment found by the `where` argument doesn't exist, create a new Assessment with this data.
     */
    create: XOR<AssessmentCreateInput, AssessmentUncheckedCreateInput>
    /**
     * In case the Assessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssessmentUpdateInput, AssessmentUncheckedUpdateInput>
  }

  /**
   * Assessment delete
   */
  export type AssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter which Assessment to delete.
     */
    where: AssessmentWhereUniqueInput
  }

  /**
   * Assessment deleteMany
   */
  export type AssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assessments to delete
     */
    where?: AssessmentWhereInput
  }

  /**
   * Assessment.findings
   */
  export type Assessment$findingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finding
     */
    select?: FindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FindingInclude<ExtArgs> | null
    where?: FindingWhereInput
    orderBy?: FindingOrderByWithRelationInput | FindingOrderByWithRelationInput[]
    cursor?: FindingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FindingScalarFieldEnum | FindingScalarFieldEnum[]
  }

  /**
   * Assessment.exploitResults
   */
  export type Assessment$exploitResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExploitResult
     */
    select?: ExploitResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExploitResultInclude<ExtArgs> | null
    where?: ExploitResultWhereInput
    orderBy?: ExploitResultOrderByWithRelationInput | ExploitResultOrderByWithRelationInput[]
    cursor?: ExploitResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExploitResultScalarFieldEnum | ExploitResultScalarFieldEnum[]
  }

  /**
   * Assessment without action
   */
  export type AssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
  }


  /**
   * Model Finding
   */

  export type AggregateFinding = {
    _count: FindingCountAggregateOutputType | null
    _min: FindingMinAggregateOutputType | null
    _max: FindingMaxAggregateOutputType | null
  }

  export type FindingMinAggregateOutputType = {
    id: string | null
    assessmentId: string | null
    vector: string | null
    prompt: string | null
    response: string | null
    technique: string | null
    vulnerable: boolean | null
    vulnerabilityType: string | null
    severity: string | null
    explanation: string | null
    recommendations: string | null
    createdAt: Date | null
  }

  export type FindingMaxAggregateOutputType = {
    id: string | null
    assessmentId: string | null
    vector: string | null
    prompt: string | null
    response: string | null
    technique: string | null
    vulnerable: boolean | null
    vulnerabilityType: string | null
    severity: string | null
    explanation: string | null
    recommendations: string | null
    createdAt: Date | null
  }

  export type FindingCountAggregateOutputType = {
    id: number
    assessmentId: number
    vector: number
    prompt: number
    response: number
    technique: number
    vulnerable: number
    vulnerabilityType: number
    severity: number
    explanation: number
    recommendations: number
    createdAt: number
    _all: number
  }


  export type FindingMinAggregateInputType = {
    id?: true
    assessmentId?: true
    vector?: true
    prompt?: true
    response?: true
    technique?: true
    vulnerable?: true
    vulnerabilityType?: true
    severity?: true
    explanation?: true
    recommendations?: true
    createdAt?: true
  }

  export type FindingMaxAggregateInputType = {
    id?: true
    assessmentId?: true
    vector?: true
    prompt?: true
    response?: true
    technique?: true
    vulnerable?: true
    vulnerabilityType?: true
    severity?: true
    explanation?: true
    recommendations?: true
    createdAt?: true
  }

  export type FindingCountAggregateInputType = {
    id?: true
    assessmentId?: true
    vector?: true
    prompt?: true
    response?: true
    technique?: true
    vulnerable?: true
    vulnerabilityType?: true
    severity?: true
    explanation?: true
    recommendations?: true
    createdAt?: true
    _all?: true
  }

  export type FindingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Finding to aggregate.
     */
    where?: FindingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Findings to fetch.
     */
    orderBy?: FindingOrderByWithRelationInput | FindingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FindingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Findings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Findings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Findings
    **/
    _count?: true | FindingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FindingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FindingMaxAggregateInputType
  }

  export type GetFindingAggregateType<T extends FindingAggregateArgs> = {
        [P in keyof T & keyof AggregateFinding]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinding[P]>
      : GetScalarType<T[P], AggregateFinding[P]>
  }




  export type FindingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FindingWhereInput
    orderBy?: FindingOrderByWithAggregationInput | FindingOrderByWithAggregationInput[]
    by: FindingScalarFieldEnum[] | FindingScalarFieldEnum
    having?: FindingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FindingCountAggregateInputType | true
    _min?: FindingMinAggregateInputType
    _max?: FindingMaxAggregateInputType
  }

  export type FindingGroupByOutputType = {
    id: string
    assessmentId: string
    vector: string
    prompt: string
    response: string
    technique: string | null
    vulnerable: boolean
    vulnerabilityType: string | null
    severity: string | null
    explanation: string | null
    recommendations: string | null
    createdAt: Date
    _count: FindingCountAggregateOutputType | null
    _min: FindingMinAggregateOutputType | null
    _max: FindingMaxAggregateOutputType | null
  }

  type GetFindingGroupByPayload<T extends FindingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FindingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FindingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FindingGroupByOutputType[P]>
            : GetScalarType<T[P], FindingGroupByOutputType[P]>
        }
      >
    >


  export type FindingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assessmentId?: boolean
    vector?: boolean
    prompt?: boolean
    response?: boolean
    technique?: boolean
    vulnerable?: boolean
    vulnerabilityType?: boolean
    severity?: boolean
    explanation?: boolean
    recommendations?: boolean
    createdAt?: boolean
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["finding"]>

  export type FindingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assessmentId?: boolean
    vector?: boolean
    prompt?: boolean
    response?: boolean
    technique?: boolean
    vulnerable?: boolean
    vulnerabilityType?: boolean
    severity?: boolean
    explanation?: boolean
    recommendations?: boolean
    createdAt?: boolean
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["finding"]>

  export type FindingSelectScalar = {
    id?: boolean
    assessmentId?: boolean
    vector?: boolean
    prompt?: boolean
    response?: boolean
    technique?: boolean
    vulnerable?: boolean
    vulnerabilityType?: boolean
    severity?: boolean
    explanation?: boolean
    recommendations?: boolean
    createdAt?: boolean
  }

  export type FindingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }
  export type FindingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }

  export type $FindingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Finding"
    objects: {
      assessment: Prisma.$AssessmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assessmentId: string
      vector: string
      prompt: string
      response: string
      technique: string | null
      vulnerable: boolean
      vulnerabilityType: string | null
      severity: string | null
      explanation: string | null
      recommendations: string | null
      createdAt: Date
    }, ExtArgs["result"]["finding"]>
    composites: {}
  }

  type FindingGetPayload<S extends boolean | null | undefined | FindingDefaultArgs> = $Result.GetResult<Prisma.$FindingPayload, S>

  type FindingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FindingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FindingCountAggregateInputType | true
    }

  export interface FindingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Finding'], meta: { name: 'Finding' } }
    /**
     * Find zero or one Finding that matches the filter.
     * @param {FindingFindUniqueArgs} args - Arguments to find a Finding
     * @example
     * // Get one Finding
     * const finding = await prisma.finding.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FindingFindUniqueArgs>(args: SelectSubset<T, FindingFindUniqueArgs<ExtArgs>>): Prisma__FindingClient<$Result.GetResult<Prisma.$FindingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Finding that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FindingFindUniqueOrThrowArgs} args - Arguments to find a Finding
     * @example
     * // Get one Finding
     * const finding = await prisma.finding.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FindingFindUniqueOrThrowArgs>(args: SelectSubset<T, FindingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FindingClient<$Result.GetResult<Prisma.$FindingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Finding that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FindingFindFirstArgs} args - Arguments to find a Finding
     * @example
     * // Get one Finding
     * const finding = await prisma.finding.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FindingFindFirstArgs>(args?: SelectSubset<T, FindingFindFirstArgs<ExtArgs>>): Prisma__FindingClient<$Result.GetResult<Prisma.$FindingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Finding that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FindingFindFirstOrThrowArgs} args - Arguments to find a Finding
     * @example
     * // Get one Finding
     * const finding = await prisma.finding.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FindingFindFirstOrThrowArgs>(args?: SelectSubset<T, FindingFindFirstOrThrowArgs<ExtArgs>>): Prisma__FindingClient<$Result.GetResult<Prisma.$FindingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Findings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FindingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Findings
     * const findings = await prisma.finding.findMany()
     * 
     * // Get first 10 Findings
     * const findings = await prisma.finding.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const findingWithIdOnly = await prisma.finding.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FindingFindManyArgs>(args?: SelectSubset<T, FindingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FindingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Finding.
     * @param {FindingCreateArgs} args - Arguments to create a Finding.
     * @example
     * // Create one Finding
     * const Finding = await prisma.finding.create({
     *   data: {
     *     // ... data to create a Finding
     *   }
     * })
     * 
     */
    create<T extends FindingCreateArgs>(args: SelectSubset<T, FindingCreateArgs<ExtArgs>>): Prisma__FindingClient<$Result.GetResult<Prisma.$FindingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Findings.
     * @param {FindingCreateManyArgs} args - Arguments to create many Findings.
     * @example
     * // Create many Findings
     * const finding = await prisma.finding.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FindingCreateManyArgs>(args?: SelectSubset<T, FindingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Findings and returns the data saved in the database.
     * @param {FindingCreateManyAndReturnArgs} args - Arguments to create many Findings.
     * @example
     * // Create many Findings
     * const finding = await prisma.finding.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Findings and only return the `id`
     * const findingWithIdOnly = await prisma.finding.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FindingCreateManyAndReturnArgs>(args?: SelectSubset<T, FindingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FindingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Finding.
     * @param {FindingDeleteArgs} args - Arguments to delete one Finding.
     * @example
     * // Delete one Finding
     * const Finding = await prisma.finding.delete({
     *   where: {
     *     // ... filter to delete one Finding
     *   }
     * })
     * 
     */
    delete<T extends FindingDeleteArgs>(args: SelectSubset<T, FindingDeleteArgs<ExtArgs>>): Prisma__FindingClient<$Result.GetResult<Prisma.$FindingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Finding.
     * @param {FindingUpdateArgs} args - Arguments to update one Finding.
     * @example
     * // Update one Finding
     * const finding = await prisma.finding.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FindingUpdateArgs>(args: SelectSubset<T, FindingUpdateArgs<ExtArgs>>): Prisma__FindingClient<$Result.GetResult<Prisma.$FindingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Findings.
     * @param {FindingDeleteManyArgs} args - Arguments to filter Findings to delete.
     * @example
     * // Delete a few Findings
     * const { count } = await prisma.finding.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FindingDeleteManyArgs>(args?: SelectSubset<T, FindingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Findings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FindingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Findings
     * const finding = await prisma.finding.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FindingUpdateManyArgs>(args: SelectSubset<T, FindingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Finding.
     * @param {FindingUpsertArgs} args - Arguments to update or create a Finding.
     * @example
     * // Update or create a Finding
     * const finding = await prisma.finding.upsert({
     *   create: {
     *     // ... data to create a Finding
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Finding we want to update
     *   }
     * })
     */
    upsert<T extends FindingUpsertArgs>(args: SelectSubset<T, FindingUpsertArgs<ExtArgs>>): Prisma__FindingClient<$Result.GetResult<Prisma.$FindingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Findings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FindingCountArgs} args - Arguments to filter Findings to count.
     * @example
     * // Count the number of Findings
     * const count = await prisma.finding.count({
     *   where: {
     *     // ... the filter for the Findings we want to count
     *   }
     * })
    **/
    count<T extends FindingCountArgs>(
      args?: Subset<T, FindingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FindingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Finding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FindingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FindingAggregateArgs>(args: Subset<T, FindingAggregateArgs>): Prisma.PrismaPromise<GetFindingAggregateType<T>>

    /**
     * Group by Finding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FindingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FindingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FindingGroupByArgs['orderBy'] }
        : { orderBy?: FindingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FindingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFindingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Finding model
   */
  readonly fields: FindingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Finding.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FindingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assessment<T extends AssessmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssessmentDefaultArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Finding model
   */ 
  interface FindingFieldRefs {
    readonly id: FieldRef<"Finding", 'String'>
    readonly assessmentId: FieldRef<"Finding", 'String'>
    readonly vector: FieldRef<"Finding", 'String'>
    readonly prompt: FieldRef<"Finding", 'String'>
    readonly response: FieldRef<"Finding", 'String'>
    readonly technique: FieldRef<"Finding", 'String'>
    readonly vulnerable: FieldRef<"Finding", 'Boolean'>
    readonly vulnerabilityType: FieldRef<"Finding", 'String'>
    readonly severity: FieldRef<"Finding", 'String'>
    readonly explanation: FieldRef<"Finding", 'String'>
    readonly recommendations: FieldRef<"Finding", 'String'>
    readonly createdAt: FieldRef<"Finding", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Finding findUnique
   */
  export type FindingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finding
     */
    select?: FindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FindingInclude<ExtArgs> | null
    /**
     * Filter, which Finding to fetch.
     */
    where: FindingWhereUniqueInput
  }

  /**
   * Finding findUniqueOrThrow
   */
  export type FindingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finding
     */
    select?: FindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FindingInclude<ExtArgs> | null
    /**
     * Filter, which Finding to fetch.
     */
    where: FindingWhereUniqueInput
  }

  /**
   * Finding findFirst
   */
  export type FindingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finding
     */
    select?: FindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FindingInclude<ExtArgs> | null
    /**
     * Filter, which Finding to fetch.
     */
    where?: FindingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Findings to fetch.
     */
    orderBy?: FindingOrderByWithRelationInput | FindingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Findings.
     */
    cursor?: FindingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Findings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Findings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Findings.
     */
    distinct?: FindingScalarFieldEnum | FindingScalarFieldEnum[]
  }

  /**
   * Finding findFirstOrThrow
   */
  export type FindingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finding
     */
    select?: FindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FindingInclude<ExtArgs> | null
    /**
     * Filter, which Finding to fetch.
     */
    where?: FindingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Findings to fetch.
     */
    orderBy?: FindingOrderByWithRelationInput | FindingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Findings.
     */
    cursor?: FindingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Findings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Findings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Findings.
     */
    distinct?: FindingScalarFieldEnum | FindingScalarFieldEnum[]
  }

  /**
   * Finding findMany
   */
  export type FindingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finding
     */
    select?: FindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FindingInclude<ExtArgs> | null
    /**
     * Filter, which Findings to fetch.
     */
    where?: FindingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Findings to fetch.
     */
    orderBy?: FindingOrderByWithRelationInput | FindingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Findings.
     */
    cursor?: FindingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Findings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Findings.
     */
    skip?: number
    distinct?: FindingScalarFieldEnum | FindingScalarFieldEnum[]
  }

  /**
   * Finding create
   */
  export type FindingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finding
     */
    select?: FindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FindingInclude<ExtArgs> | null
    /**
     * The data needed to create a Finding.
     */
    data: XOR<FindingCreateInput, FindingUncheckedCreateInput>
  }

  /**
   * Finding createMany
   */
  export type FindingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Findings.
     */
    data: FindingCreateManyInput | FindingCreateManyInput[]
  }

  /**
   * Finding createManyAndReturn
   */
  export type FindingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finding
     */
    select?: FindingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Findings.
     */
    data: FindingCreateManyInput | FindingCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FindingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Finding update
   */
  export type FindingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finding
     */
    select?: FindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FindingInclude<ExtArgs> | null
    /**
     * The data needed to update a Finding.
     */
    data: XOR<FindingUpdateInput, FindingUncheckedUpdateInput>
    /**
     * Choose, which Finding to update.
     */
    where: FindingWhereUniqueInput
  }

  /**
   * Finding updateMany
   */
  export type FindingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Findings.
     */
    data: XOR<FindingUpdateManyMutationInput, FindingUncheckedUpdateManyInput>
    /**
     * Filter which Findings to update
     */
    where?: FindingWhereInput
  }

  /**
   * Finding upsert
   */
  export type FindingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finding
     */
    select?: FindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FindingInclude<ExtArgs> | null
    /**
     * The filter to search for the Finding to update in case it exists.
     */
    where: FindingWhereUniqueInput
    /**
     * In case the Finding found by the `where` argument doesn't exist, create a new Finding with this data.
     */
    create: XOR<FindingCreateInput, FindingUncheckedCreateInput>
    /**
     * In case the Finding was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FindingUpdateInput, FindingUncheckedUpdateInput>
  }

  /**
   * Finding delete
   */
  export type FindingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finding
     */
    select?: FindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FindingInclude<ExtArgs> | null
    /**
     * Filter which Finding to delete.
     */
    where: FindingWhereUniqueInput
  }

  /**
   * Finding deleteMany
   */
  export type FindingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Findings to delete
     */
    where?: FindingWhereInput
  }

  /**
   * Finding without action
   */
  export type FindingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finding
     */
    select?: FindingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FindingInclude<ExtArgs> | null
  }


  /**
   * Model ExploitResult
   */

  export type AggregateExploitResult = {
    _count: ExploitResultCountAggregateOutputType | null
    _avg: ExploitResultAvgAggregateOutputType | null
    _sum: ExploitResultSumAggregateOutputType | null
    _min: ExploitResultMinAggregateOutputType | null
    _max: ExploitResultMaxAggregateOutputType | null
  }

  export type ExploitResultAvgAggregateOutputType = {
    stageNumber: number | null
  }

  export type ExploitResultSumAggregateOutputType = {
    stageNumber: number | null
  }

  export type ExploitResultMinAggregateOutputType = {
    id: string | null
    assessmentId: string | null
    exploitName: string | null
    description: string | null
    stageNumber: number | null
    stagePurpose: string | null
    prompt: string | null
    response: string | null
    vulnerabilityFound: boolean | null
    vulnerabilityType: string | null
    severity: string | null
    keyInformation: string | null
    createdAt: Date | null
  }

  export type ExploitResultMaxAggregateOutputType = {
    id: string | null
    assessmentId: string | null
    exploitName: string | null
    description: string | null
    stageNumber: number | null
    stagePurpose: string | null
    prompt: string | null
    response: string | null
    vulnerabilityFound: boolean | null
    vulnerabilityType: string | null
    severity: string | null
    keyInformation: string | null
    createdAt: Date | null
  }

  export type ExploitResultCountAggregateOutputType = {
    id: number
    assessmentId: number
    exploitName: number
    description: number
    stageNumber: number
    stagePurpose: number
    prompt: number
    response: number
    vulnerabilityFound: number
    vulnerabilityType: number
    severity: number
    keyInformation: number
    createdAt: number
    _all: number
  }


  export type ExploitResultAvgAggregateInputType = {
    stageNumber?: true
  }

  export type ExploitResultSumAggregateInputType = {
    stageNumber?: true
  }

  export type ExploitResultMinAggregateInputType = {
    id?: true
    assessmentId?: true
    exploitName?: true
    description?: true
    stageNumber?: true
    stagePurpose?: true
    prompt?: true
    response?: true
    vulnerabilityFound?: true
    vulnerabilityType?: true
    severity?: true
    keyInformation?: true
    createdAt?: true
  }

  export type ExploitResultMaxAggregateInputType = {
    id?: true
    assessmentId?: true
    exploitName?: true
    description?: true
    stageNumber?: true
    stagePurpose?: true
    prompt?: true
    response?: true
    vulnerabilityFound?: true
    vulnerabilityType?: true
    severity?: true
    keyInformation?: true
    createdAt?: true
  }

  export type ExploitResultCountAggregateInputType = {
    id?: true
    assessmentId?: true
    exploitName?: true
    description?: true
    stageNumber?: true
    stagePurpose?: true
    prompt?: true
    response?: true
    vulnerabilityFound?: true
    vulnerabilityType?: true
    severity?: true
    keyInformation?: true
    createdAt?: true
    _all?: true
  }

  export type ExploitResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExploitResult to aggregate.
     */
    where?: ExploitResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExploitResults to fetch.
     */
    orderBy?: ExploitResultOrderByWithRelationInput | ExploitResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExploitResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExploitResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExploitResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExploitResults
    **/
    _count?: true | ExploitResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExploitResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExploitResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExploitResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExploitResultMaxAggregateInputType
  }

  export type GetExploitResultAggregateType<T extends ExploitResultAggregateArgs> = {
        [P in keyof T & keyof AggregateExploitResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExploitResult[P]>
      : GetScalarType<T[P], AggregateExploitResult[P]>
  }




  export type ExploitResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExploitResultWhereInput
    orderBy?: ExploitResultOrderByWithAggregationInput | ExploitResultOrderByWithAggregationInput[]
    by: ExploitResultScalarFieldEnum[] | ExploitResultScalarFieldEnum
    having?: ExploitResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExploitResultCountAggregateInputType | true
    _avg?: ExploitResultAvgAggregateInputType
    _sum?: ExploitResultSumAggregateInputType
    _min?: ExploitResultMinAggregateInputType
    _max?: ExploitResultMaxAggregateInputType
  }

  export type ExploitResultGroupByOutputType = {
    id: string
    assessmentId: string
    exploitName: string
    description: string | null
    stageNumber: number
    stagePurpose: string
    prompt: string
    response: string
    vulnerabilityFound: boolean
    vulnerabilityType: string | null
    severity: string | null
    keyInformation: string | null
    createdAt: Date
    _count: ExploitResultCountAggregateOutputType | null
    _avg: ExploitResultAvgAggregateOutputType | null
    _sum: ExploitResultSumAggregateOutputType | null
    _min: ExploitResultMinAggregateOutputType | null
    _max: ExploitResultMaxAggregateOutputType | null
  }

  type GetExploitResultGroupByPayload<T extends ExploitResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExploitResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExploitResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExploitResultGroupByOutputType[P]>
            : GetScalarType<T[P], ExploitResultGroupByOutputType[P]>
        }
      >
    >


  export type ExploitResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assessmentId?: boolean
    exploitName?: boolean
    description?: boolean
    stageNumber?: boolean
    stagePurpose?: boolean
    prompt?: boolean
    response?: boolean
    vulnerabilityFound?: boolean
    vulnerabilityType?: boolean
    severity?: boolean
    keyInformation?: boolean
    createdAt?: boolean
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exploitResult"]>

  export type ExploitResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assessmentId?: boolean
    exploitName?: boolean
    description?: boolean
    stageNumber?: boolean
    stagePurpose?: boolean
    prompt?: boolean
    response?: boolean
    vulnerabilityFound?: boolean
    vulnerabilityType?: boolean
    severity?: boolean
    keyInformation?: boolean
    createdAt?: boolean
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exploitResult"]>

  export type ExploitResultSelectScalar = {
    id?: boolean
    assessmentId?: boolean
    exploitName?: boolean
    description?: boolean
    stageNumber?: boolean
    stagePurpose?: boolean
    prompt?: boolean
    response?: boolean
    vulnerabilityFound?: boolean
    vulnerabilityType?: boolean
    severity?: boolean
    keyInformation?: boolean
    createdAt?: boolean
  }

  export type ExploitResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }
  export type ExploitResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }

  export type $ExploitResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExploitResult"
    objects: {
      assessment: Prisma.$AssessmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assessmentId: string
      exploitName: string
      description: string | null
      stageNumber: number
      stagePurpose: string
      prompt: string
      response: string
      vulnerabilityFound: boolean
      vulnerabilityType: string | null
      severity: string | null
      keyInformation: string | null
      createdAt: Date
    }, ExtArgs["result"]["exploitResult"]>
    composites: {}
  }

  type ExploitResultGetPayload<S extends boolean | null | undefined | ExploitResultDefaultArgs> = $Result.GetResult<Prisma.$ExploitResultPayload, S>

  type ExploitResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExploitResultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExploitResultCountAggregateInputType | true
    }

  export interface ExploitResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExploitResult'], meta: { name: 'ExploitResult' } }
    /**
     * Find zero or one ExploitResult that matches the filter.
     * @param {ExploitResultFindUniqueArgs} args - Arguments to find a ExploitResult
     * @example
     * // Get one ExploitResult
     * const exploitResult = await prisma.exploitResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExploitResultFindUniqueArgs>(args: SelectSubset<T, ExploitResultFindUniqueArgs<ExtArgs>>): Prisma__ExploitResultClient<$Result.GetResult<Prisma.$ExploitResultPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ExploitResult that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExploitResultFindUniqueOrThrowArgs} args - Arguments to find a ExploitResult
     * @example
     * // Get one ExploitResult
     * const exploitResult = await prisma.exploitResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExploitResultFindUniqueOrThrowArgs>(args: SelectSubset<T, ExploitResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExploitResultClient<$Result.GetResult<Prisma.$ExploitResultPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ExploitResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExploitResultFindFirstArgs} args - Arguments to find a ExploitResult
     * @example
     * // Get one ExploitResult
     * const exploitResult = await prisma.exploitResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExploitResultFindFirstArgs>(args?: SelectSubset<T, ExploitResultFindFirstArgs<ExtArgs>>): Prisma__ExploitResultClient<$Result.GetResult<Prisma.$ExploitResultPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ExploitResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExploitResultFindFirstOrThrowArgs} args - Arguments to find a ExploitResult
     * @example
     * // Get one ExploitResult
     * const exploitResult = await prisma.exploitResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExploitResultFindFirstOrThrowArgs>(args?: SelectSubset<T, ExploitResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExploitResultClient<$Result.GetResult<Prisma.$ExploitResultPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ExploitResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExploitResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExploitResults
     * const exploitResults = await prisma.exploitResult.findMany()
     * 
     * // Get first 10 ExploitResults
     * const exploitResults = await prisma.exploitResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exploitResultWithIdOnly = await prisma.exploitResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExploitResultFindManyArgs>(args?: SelectSubset<T, ExploitResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExploitResultPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ExploitResult.
     * @param {ExploitResultCreateArgs} args - Arguments to create a ExploitResult.
     * @example
     * // Create one ExploitResult
     * const ExploitResult = await prisma.exploitResult.create({
     *   data: {
     *     // ... data to create a ExploitResult
     *   }
     * })
     * 
     */
    create<T extends ExploitResultCreateArgs>(args: SelectSubset<T, ExploitResultCreateArgs<ExtArgs>>): Prisma__ExploitResultClient<$Result.GetResult<Prisma.$ExploitResultPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ExploitResults.
     * @param {ExploitResultCreateManyArgs} args - Arguments to create many ExploitResults.
     * @example
     * // Create many ExploitResults
     * const exploitResult = await prisma.exploitResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExploitResultCreateManyArgs>(args?: SelectSubset<T, ExploitResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExploitResults and returns the data saved in the database.
     * @param {ExploitResultCreateManyAndReturnArgs} args - Arguments to create many ExploitResults.
     * @example
     * // Create many ExploitResults
     * const exploitResult = await prisma.exploitResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExploitResults and only return the `id`
     * const exploitResultWithIdOnly = await prisma.exploitResult.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExploitResultCreateManyAndReturnArgs>(args?: SelectSubset<T, ExploitResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExploitResultPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ExploitResult.
     * @param {ExploitResultDeleteArgs} args - Arguments to delete one ExploitResult.
     * @example
     * // Delete one ExploitResult
     * const ExploitResult = await prisma.exploitResult.delete({
     *   where: {
     *     // ... filter to delete one ExploitResult
     *   }
     * })
     * 
     */
    delete<T extends ExploitResultDeleteArgs>(args: SelectSubset<T, ExploitResultDeleteArgs<ExtArgs>>): Prisma__ExploitResultClient<$Result.GetResult<Prisma.$ExploitResultPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ExploitResult.
     * @param {ExploitResultUpdateArgs} args - Arguments to update one ExploitResult.
     * @example
     * // Update one ExploitResult
     * const exploitResult = await prisma.exploitResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExploitResultUpdateArgs>(args: SelectSubset<T, ExploitResultUpdateArgs<ExtArgs>>): Prisma__ExploitResultClient<$Result.GetResult<Prisma.$ExploitResultPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ExploitResults.
     * @param {ExploitResultDeleteManyArgs} args - Arguments to filter ExploitResults to delete.
     * @example
     * // Delete a few ExploitResults
     * const { count } = await prisma.exploitResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExploitResultDeleteManyArgs>(args?: SelectSubset<T, ExploitResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExploitResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExploitResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExploitResults
     * const exploitResult = await prisma.exploitResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExploitResultUpdateManyArgs>(args: SelectSubset<T, ExploitResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExploitResult.
     * @param {ExploitResultUpsertArgs} args - Arguments to update or create a ExploitResult.
     * @example
     * // Update or create a ExploitResult
     * const exploitResult = await prisma.exploitResult.upsert({
     *   create: {
     *     // ... data to create a ExploitResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExploitResult we want to update
     *   }
     * })
     */
    upsert<T extends ExploitResultUpsertArgs>(args: SelectSubset<T, ExploitResultUpsertArgs<ExtArgs>>): Prisma__ExploitResultClient<$Result.GetResult<Prisma.$ExploitResultPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ExploitResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExploitResultCountArgs} args - Arguments to filter ExploitResults to count.
     * @example
     * // Count the number of ExploitResults
     * const count = await prisma.exploitResult.count({
     *   where: {
     *     // ... the filter for the ExploitResults we want to count
     *   }
     * })
    **/
    count<T extends ExploitResultCountArgs>(
      args?: Subset<T, ExploitResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExploitResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExploitResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExploitResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExploitResultAggregateArgs>(args: Subset<T, ExploitResultAggregateArgs>): Prisma.PrismaPromise<GetExploitResultAggregateType<T>>

    /**
     * Group by ExploitResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExploitResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExploitResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExploitResultGroupByArgs['orderBy'] }
        : { orderBy?: ExploitResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExploitResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExploitResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExploitResult model
   */
  readonly fields: ExploitResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExploitResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExploitResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assessment<T extends AssessmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssessmentDefaultArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExploitResult model
   */ 
  interface ExploitResultFieldRefs {
    readonly id: FieldRef<"ExploitResult", 'String'>
    readonly assessmentId: FieldRef<"ExploitResult", 'String'>
    readonly exploitName: FieldRef<"ExploitResult", 'String'>
    readonly description: FieldRef<"ExploitResult", 'String'>
    readonly stageNumber: FieldRef<"ExploitResult", 'Int'>
    readonly stagePurpose: FieldRef<"ExploitResult", 'String'>
    readonly prompt: FieldRef<"ExploitResult", 'String'>
    readonly response: FieldRef<"ExploitResult", 'String'>
    readonly vulnerabilityFound: FieldRef<"ExploitResult", 'Boolean'>
    readonly vulnerabilityType: FieldRef<"ExploitResult", 'String'>
    readonly severity: FieldRef<"ExploitResult", 'String'>
    readonly keyInformation: FieldRef<"ExploitResult", 'String'>
    readonly createdAt: FieldRef<"ExploitResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ExploitResult findUnique
   */
  export type ExploitResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExploitResult
     */
    select?: ExploitResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExploitResultInclude<ExtArgs> | null
    /**
     * Filter, which ExploitResult to fetch.
     */
    where: ExploitResultWhereUniqueInput
  }

  /**
   * ExploitResult findUniqueOrThrow
   */
  export type ExploitResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExploitResult
     */
    select?: ExploitResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExploitResultInclude<ExtArgs> | null
    /**
     * Filter, which ExploitResult to fetch.
     */
    where: ExploitResultWhereUniqueInput
  }

  /**
   * ExploitResult findFirst
   */
  export type ExploitResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExploitResult
     */
    select?: ExploitResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExploitResultInclude<ExtArgs> | null
    /**
     * Filter, which ExploitResult to fetch.
     */
    where?: ExploitResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExploitResults to fetch.
     */
    orderBy?: ExploitResultOrderByWithRelationInput | ExploitResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExploitResults.
     */
    cursor?: ExploitResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExploitResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExploitResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExploitResults.
     */
    distinct?: ExploitResultScalarFieldEnum | ExploitResultScalarFieldEnum[]
  }

  /**
   * ExploitResult findFirstOrThrow
   */
  export type ExploitResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExploitResult
     */
    select?: ExploitResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExploitResultInclude<ExtArgs> | null
    /**
     * Filter, which ExploitResult to fetch.
     */
    where?: ExploitResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExploitResults to fetch.
     */
    orderBy?: ExploitResultOrderByWithRelationInput | ExploitResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExploitResults.
     */
    cursor?: ExploitResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExploitResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExploitResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExploitResults.
     */
    distinct?: ExploitResultScalarFieldEnum | ExploitResultScalarFieldEnum[]
  }

  /**
   * ExploitResult findMany
   */
  export type ExploitResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExploitResult
     */
    select?: ExploitResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExploitResultInclude<ExtArgs> | null
    /**
     * Filter, which ExploitResults to fetch.
     */
    where?: ExploitResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExploitResults to fetch.
     */
    orderBy?: ExploitResultOrderByWithRelationInput | ExploitResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExploitResults.
     */
    cursor?: ExploitResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExploitResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExploitResults.
     */
    skip?: number
    distinct?: ExploitResultScalarFieldEnum | ExploitResultScalarFieldEnum[]
  }

  /**
   * ExploitResult create
   */
  export type ExploitResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExploitResult
     */
    select?: ExploitResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExploitResultInclude<ExtArgs> | null
    /**
     * The data needed to create a ExploitResult.
     */
    data: XOR<ExploitResultCreateInput, ExploitResultUncheckedCreateInput>
  }

  /**
   * ExploitResult createMany
   */
  export type ExploitResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExploitResults.
     */
    data: ExploitResultCreateManyInput | ExploitResultCreateManyInput[]
  }

  /**
   * ExploitResult createManyAndReturn
   */
  export type ExploitResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExploitResult
     */
    select?: ExploitResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ExploitResults.
     */
    data: ExploitResultCreateManyInput | ExploitResultCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExploitResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExploitResult update
   */
  export type ExploitResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExploitResult
     */
    select?: ExploitResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExploitResultInclude<ExtArgs> | null
    /**
     * The data needed to update a ExploitResult.
     */
    data: XOR<ExploitResultUpdateInput, ExploitResultUncheckedUpdateInput>
    /**
     * Choose, which ExploitResult to update.
     */
    where: ExploitResultWhereUniqueInput
  }

  /**
   * ExploitResult updateMany
   */
  export type ExploitResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExploitResults.
     */
    data: XOR<ExploitResultUpdateManyMutationInput, ExploitResultUncheckedUpdateManyInput>
    /**
     * Filter which ExploitResults to update
     */
    where?: ExploitResultWhereInput
  }

  /**
   * ExploitResult upsert
   */
  export type ExploitResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExploitResult
     */
    select?: ExploitResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExploitResultInclude<ExtArgs> | null
    /**
     * The filter to search for the ExploitResult to update in case it exists.
     */
    where: ExploitResultWhereUniqueInput
    /**
     * In case the ExploitResult found by the `where` argument doesn't exist, create a new ExploitResult with this data.
     */
    create: XOR<ExploitResultCreateInput, ExploitResultUncheckedCreateInput>
    /**
     * In case the ExploitResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExploitResultUpdateInput, ExploitResultUncheckedUpdateInput>
  }

  /**
   * ExploitResult delete
   */
  export type ExploitResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExploitResult
     */
    select?: ExploitResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExploitResultInclude<ExtArgs> | null
    /**
     * Filter which ExploitResult to delete.
     */
    where: ExploitResultWhereUniqueInput
  }

  /**
   * ExploitResult deleteMany
   */
  export type ExploitResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExploitResults to delete
     */
    where?: ExploitResultWhereInput
  }

  /**
   * ExploitResult without action
   */
  export type ExploitResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExploitResult
     */
    select?: ExploitResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExploitResultInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AssessmentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    targetName: 'targetName',
    targetDescription: 'targetDescription',
    status: 'status',
    systemAnalysis: 'systemAnalysis',
    totalTests: 'totalTests',
    vulnerabilities: 'vulnerabilities',
    securityScore: 'securityScore',
    vulnerabilityReport: 'vulnerabilityReport',
    riskLevel: 'riskLevel',
    executionTime: 'executionTime',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssessmentScalarFieldEnum = (typeof AssessmentScalarFieldEnum)[keyof typeof AssessmentScalarFieldEnum]


  export const FindingScalarFieldEnum: {
    id: 'id',
    assessmentId: 'assessmentId',
    vector: 'vector',
    prompt: 'prompt',
    response: 'response',
    technique: 'technique',
    vulnerable: 'vulnerable',
    vulnerabilityType: 'vulnerabilityType',
    severity: 'severity',
    explanation: 'explanation',
    recommendations: 'recommendations',
    createdAt: 'createdAt'
  };

  export type FindingScalarFieldEnum = (typeof FindingScalarFieldEnum)[keyof typeof FindingScalarFieldEnum]


  export const ExploitResultScalarFieldEnum: {
    id: 'id',
    assessmentId: 'assessmentId',
    exploitName: 'exploitName',
    description: 'description',
    stageNumber: 'stageNumber',
    stagePurpose: 'stagePurpose',
    prompt: 'prompt',
    response: 'response',
    vulnerabilityFound: 'vulnerabilityFound',
    vulnerabilityType: 'vulnerabilityType',
    severity: 'severity',
    keyInformation: 'keyInformation',
    createdAt: 'createdAt'
  };

  export type ExploitResultScalarFieldEnum = (typeof ExploitResultScalarFieldEnum)[keyof typeof ExploitResultScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type AssessmentWhereInput = {
    AND?: AssessmentWhereInput | AssessmentWhereInput[]
    OR?: AssessmentWhereInput[]
    NOT?: AssessmentWhereInput | AssessmentWhereInput[]
    id?: StringFilter<"Assessment"> | string
    userId?: StringFilter<"Assessment"> | string
    targetName?: StringFilter<"Assessment"> | string
    targetDescription?: StringNullableFilter<"Assessment"> | string | null
    status?: StringFilter<"Assessment"> | string
    systemAnalysis?: StringNullableFilter<"Assessment"> | string | null
    totalTests?: IntFilter<"Assessment"> | number
    vulnerabilities?: IntFilter<"Assessment"> | number
    securityScore?: FloatNullableFilter<"Assessment"> | number | null
    vulnerabilityReport?: StringNullableFilter<"Assessment"> | string | null
    riskLevel?: StringNullableFilter<"Assessment"> | string | null
    executionTime?: StringNullableFilter<"Assessment"> | string | null
    createdAt?: DateTimeFilter<"Assessment"> | Date | string
    updatedAt?: DateTimeFilter<"Assessment"> | Date | string
    findings?: FindingListRelationFilter
    exploitResults?: ExploitResultListRelationFilter
  }

  export type AssessmentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    targetName?: SortOrder
    targetDescription?: SortOrderInput | SortOrder
    status?: SortOrder
    systemAnalysis?: SortOrderInput | SortOrder
    totalTests?: SortOrder
    vulnerabilities?: SortOrder
    securityScore?: SortOrderInput | SortOrder
    vulnerabilityReport?: SortOrderInput | SortOrder
    riskLevel?: SortOrderInput | SortOrder
    executionTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    findings?: FindingOrderByRelationAggregateInput
    exploitResults?: ExploitResultOrderByRelationAggregateInput
  }

  export type AssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssessmentWhereInput | AssessmentWhereInput[]
    OR?: AssessmentWhereInput[]
    NOT?: AssessmentWhereInput | AssessmentWhereInput[]
    userId?: StringFilter<"Assessment"> | string
    targetName?: StringFilter<"Assessment"> | string
    targetDescription?: StringNullableFilter<"Assessment"> | string | null
    status?: StringFilter<"Assessment"> | string
    systemAnalysis?: StringNullableFilter<"Assessment"> | string | null
    totalTests?: IntFilter<"Assessment"> | number
    vulnerabilities?: IntFilter<"Assessment"> | number
    securityScore?: FloatNullableFilter<"Assessment"> | number | null
    vulnerabilityReport?: StringNullableFilter<"Assessment"> | string | null
    riskLevel?: StringNullableFilter<"Assessment"> | string | null
    executionTime?: StringNullableFilter<"Assessment"> | string | null
    createdAt?: DateTimeFilter<"Assessment"> | Date | string
    updatedAt?: DateTimeFilter<"Assessment"> | Date | string
    findings?: FindingListRelationFilter
    exploitResults?: ExploitResultListRelationFilter
  }, "id">

  export type AssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    targetName?: SortOrder
    targetDescription?: SortOrderInput | SortOrder
    status?: SortOrder
    systemAnalysis?: SortOrderInput | SortOrder
    totalTests?: SortOrder
    vulnerabilities?: SortOrder
    securityScore?: SortOrderInput | SortOrder
    vulnerabilityReport?: SortOrderInput | SortOrder
    riskLevel?: SortOrderInput | SortOrder
    executionTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssessmentCountOrderByAggregateInput
    _avg?: AssessmentAvgOrderByAggregateInput
    _max?: AssessmentMaxOrderByAggregateInput
    _min?: AssessmentMinOrderByAggregateInput
    _sum?: AssessmentSumOrderByAggregateInput
  }

  export type AssessmentScalarWhereWithAggregatesInput = {
    AND?: AssessmentScalarWhereWithAggregatesInput | AssessmentScalarWhereWithAggregatesInput[]
    OR?: AssessmentScalarWhereWithAggregatesInput[]
    NOT?: AssessmentScalarWhereWithAggregatesInput | AssessmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Assessment"> | string
    userId?: StringWithAggregatesFilter<"Assessment"> | string
    targetName?: StringWithAggregatesFilter<"Assessment"> | string
    targetDescription?: StringNullableWithAggregatesFilter<"Assessment"> | string | null
    status?: StringWithAggregatesFilter<"Assessment"> | string
    systemAnalysis?: StringNullableWithAggregatesFilter<"Assessment"> | string | null
    totalTests?: IntWithAggregatesFilter<"Assessment"> | number
    vulnerabilities?: IntWithAggregatesFilter<"Assessment"> | number
    securityScore?: FloatNullableWithAggregatesFilter<"Assessment"> | number | null
    vulnerabilityReport?: StringNullableWithAggregatesFilter<"Assessment"> | string | null
    riskLevel?: StringNullableWithAggregatesFilter<"Assessment"> | string | null
    executionTime?: StringNullableWithAggregatesFilter<"Assessment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Assessment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Assessment"> | Date | string
  }

  export type FindingWhereInput = {
    AND?: FindingWhereInput | FindingWhereInput[]
    OR?: FindingWhereInput[]
    NOT?: FindingWhereInput | FindingWhereInput[]
    id?: StringFilter<"Finding"> | string
    assessmentId?: StringFilter<"Finding"> | string
    vector?: StringFilter<"Finding"> | string
    prompt?: StringFilter<"Finding"> | string
    response?: StringFilter<"Finding"> | string
    technique?: StringNullableFilter<"Finding"> | string | null
    vulnerable?: BoolFilter<"Finding"> | boolean
    vulnerabilityType?: StringNullableFilter<"Finding"> | string | null
    severity?: StringNullableFilter<"Finding"> | string | null
    explanation?: StringNullableFilter<"Finding"> | string | null
    recommendations?: StringNullableFilter<"Finding"> | string | null
    createdAt?: DateTimeFilter<"Finding"> | Date | string
    assessment?: XOR<AssessmentRelationFilter, AssessmentWhereInput>
  }

  export type FindingOrderByWithRelationInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    vector?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    technique?: SortOrderInput | SortOrder
    vulnerable?: SortOrder
    vulnerabilityType?: SortOrderInput | SortOrder
    severity?: SortOrderInput | SortOrder
    explanation?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    assessment?: AssessmentOrderByWithRelationInput
  }

  export type FindingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FindingWhereInput | FindingWhereInput[]
    OR?: FindingWhereInput[]
    NOT?: FindingWhereInput | FindingWhereInput[]
    assessmentId?: StringFilter<"Finding"> | string
    vector?: StringFilter<"Finding"> | string
    prompt?: StringFilter<"Finding"> | string
    response?: StringFilter<"Finding"> | string
    technique?: StringNullableFilter<"Finding"> | string | null
    vulnerable?: BoolFilter<"Finding"> | boolean
    vulnerabilityType?: StringNullableFilter<"Finding"> | string | null
    severity?: StringNullableFilter<"Finding"> | string | null
    explanation?: StringNullableFilter<"Finding"> | string | null
    recommendations?: StringNullableFilter<"Finding"> | string | null
    createdAt?: DateTimeFilter<"Finding"> | Date | string
    assessment?: XOR<AssessmentRelationFilter, AssessmentWhereInput>
  }, "id">

  export type FindingOrderByWithAggregationInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    vector?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    technique?: SortOrderInput | SortOrder
    vulnerable?: SortOrder
    vulnerabilityType?: SortOrderInput | SortOrder
    severity?: SortOrderInput | SortOrder
    explanation?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: FindingCountOrderByAggregateInput
    _max?: FindingMaxOrderByAggregateInput
    _min?: FindingMinOrderByAggregateInput
  }

  export type FindingScalarWhereWithAggregatesInput = {
    AND?: FindingScalarWhereWithAggregatesInput | FindingScalarWhereWithAggregatesInput[]
    OR?: FindingScalarWhereWithAggregatesInput[]
    NOT?: FindingScalarWhereWithAggregatesInput | FindingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Finding"> | string
    assessmentId?: StringWithAggregatesFilter<"Finding"> | string
    vector?: StringWithAggregatesFilter<"Finding"> | string
    prompt?: StringWithAggregatesFilter<"Finding"> | string
    response?: StringWithAggregatesFilter<"Finding"> | string
    technique?: StringNullableWithAggregatesFilter<"Finding"> | string | null
    vulnerable?: BoolWithAggregatesFilter<"Finding"> | boolean
    vulnerabilityType?: StringNullableWithAggregatesFilter<"Finding"> | string | null
    severity?: StringNullableWithAggregatesFilter<"Finding"> | string | null
    explanation?: StringNullableWithAggregatesFilter<"Finding"> | string | null
    recommendations?: StringNullableWithAggregatesFilter<"Finding"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Finding"> | Date | string
  }

  export type ExploitResultWhereInput = {
    AND?: ExploitResultWhereInput | ExploitResultWhereInput[]
    OR?: ExploitResultWhereInput[]
    NOT?: ExploitResultWhereInput | ExploitResultWhereInput[]
    id?: StringFilter<"ExploitResult"> | string
    assessmentId?: StringFilter<"ExploitResult"> | string
    exploitName?: StringFilter<"ExploitResult"> | string
    description?: StringNullableFilter<"ExploitResult"> | string | null
    stageNumber?: IntFilter<"ExploitResult"> | number
    stagePurpose?: StringFilter<"ExploitResult"> | string
    prompt?: StringFilter<"ExploitResult"> | string
    response?: StringFilter<"ExploitResult"> | string
    vulnerabilityFound?: BoolFilter<"ExploitResult"> | boolean
    vulnerabilityType?: StringNullableFilter<"ExploitResult"> | string | null
    severity?: StringNullableFilter<"ExploitResult"> | string | null
    keyInformation?: StringNullableFilter<"ExploitResult"> | string | null
    createdAt?: DateTimeFilter<"ExploitResult"> | Date | string
    assessment?: XOR<AssessmentRelationFilter, AssessmentWhereInput>
  }

  export type ExploitResultOrderByWithRelationInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    exploitName?: SortOrder
    description?: SortOrderInput | SortOrder
    stageNumber?: SortOrder
    stagePurpose?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    vulnerabilityFound?: SortOrder
    vulnerabilityType?: SortOrderInput | SortOrder
    severity?: SortOrderInput | SortOrder
    keyInformation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    assessment?: AssessmentOrderByWithRelationInput
  }

  export type ExploitResultWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExploitResultWhereInput | ExploitResultWhereInput[]
    OR?: ExploitResultWhereInput[]
    NOT?: ExploitResultWhereInput | ExploitResultWhereInput[]
    assessmentId?: StringFilter<"ExploitResult"> | string
    exploitName?: StringFilter<"ExploitResult"> | string
    description?: StringNullableFilter<"ExploitResult"> | string | null
    stageNumber?: IntFilter<"ExploitResult"> | number
    stagePurpose?: StringFilter<"ExploitResult"> | string
    prompt?: StringFilter<"ExploitResult"> | string
    response?: StringFilter<"ExploitResult"> | string
    vulnerabilityFound?: BoolFilter<"ExploitResult"> | boolean
    vulnerabilityType?: StringNullableFilter<"ExploitResult"> | string | null
    severity?: StringNullableFilter<"ExploitResult"> | string | null
    keyInformation?: StringNullableFilter<"ExploitResult"> | string | null
    createdAt?: DateTimeFilter<"ExploitResult"> | Date | string
    assessment?: XOR<AssessmentRelationFilter, AssessmentWhereInput>
  }, "id">

  export type ExploitResultOrderByWithAggregationInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    exploitName?: SortOrder
    description?: SortOrderInput | SortOrder
    stageNumber?: SortOrder
    stagePurpose?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    vulnerabilityFound?: SortOrder
    vulnerabilityType?: SortOrderInput | SortOrder
    severity?: SortOrderInput | SortOrder
    keyInformation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ExploitResultCountOrderByAggregateInput
    _avg?: ExploitResultAvgOrderByAggregateInput
    _max?: ExploitResultMaxOrderByAggregateInput
    _min?: ExploitResultMinOrderByAggregateInput
    _sum?: ExploitResultSumOrderByAggregateInput
  }

  export type ExploitResultScalarWhereWithAggregatesInput = {
    AND?: ExploitResultScalarWhereWithAggregatesInput | ExploitResultScalarWhereWithAggregatesInput[]
    OR?: ExploitResultScalarWhereWithAggregatesInput[]
    NOT?: ExploitResultScalarWhereWithAggregatesInput | ExploitResultScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExploitResult"> | string
    assessmentId?: StringWithAggregatesFilter<"ExploitResult"> | string
    exploitName?: StringWithAggregatesFilter<"ExploitResult"> | string
    description?: StringNullableWithAggregatesFilter<"ExploitResult"> | string | null
    stageNumber?: IntWithAggregatesFilter<"ExploitResult"> | number
    stagePurpose?: StringWithAggregatesFilter<"ExploitResult"> | string
    prompt?: StringWithAggregatesFilter<"ExploitResult"> | string
    response?: StringWithAggregatesFilter<"ExploitResult"> | string
    vulnerabilityFound?: BoolWithAggregatesFilter<"ExploitResult"> | boolean
    vulnerabilityType?: StringNullableWithAggregatesFilter<"ExploitResult"> | string | null
    severity?: StringNullableWithAggregatesFilter<"ExploitResult"> | string | null
    keyInformation?: StringNullableWithAggregatesFilter<"ExploitResult"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ExploitResult"> | Date | string
  }

  export type AssessmentCreateInput = {
    id?: string
    userId: string
    targetName: string
    targetDescription?: string | null
    status?: string
    systemAnalysis?: string | null
    totalTests?: number
    vulnerabilities?: number
    securityScore?: number | null
    vulnerabilityReport?: string | null
    riskLevel?: string | null
    executionTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    findings?: FindingCreateNestedManyWithoutAssessmentInput
    exploitResults?: ExploitResultCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentUncheckedCreateInput = {
    id?: string
    userId: string
    targetName: string
    targetDescription?: string | null
    status?: string
    systemAnalysis?: string | null
    totalTests?: number
    vulnerabilities?: number
    securityScore?: number | null
    vulnerabilityReport?: string | null
    riskLevel?: string | null
    executionTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    findings?: FindingUncheckedCreateNestedManyWithoutAssessmentInput
    exploitResults?: ExploitResultUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    targetName?: StringFieldUpdateOperationsInput | string
    targetDescription?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    systemAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    totalTests?: IntFieldUpdateOperationsInput | number
    vulnerabilities?: IntFieldUpdateOperationsInput | number
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    vulnerabilityReport?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    findings?: FindingUpdateManyWithoutAssessmentNestedInput
    exploitResults?: ExploitResultUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    targetName?: StringFieldUpdateOperationsInput | string
    targetDescription?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    systemAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    totalTests?: IntFieldUpdateOperationsInput | number
    vulnerabilities?: IntFieldUpdateOperationsInput | number
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    vulnerabilityReport?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    findings?: FindingUncheckedUpdateManyWithoutAssessmentNestedInput
    exploitResults?: ExploitResultUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentCreateManyInput = {
    id?: string
    userId: string
    targetName: string
    targetDescription?: string | null
    status?: string
    systemAnalysis?: string | null
    totalTests?: number
    vulnerabilities?: number
    securityScore?: number | null
    vulnerabilityReport?: string | null
    riskLevel?: string | null
    executionTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    targetName?: StringFieldUpdateOperationsInput | string
    targetDescription?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    systemAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    totalTests?: IntFieldUpdateOperationsInput | number
    vulnerabilities?: IntFieldUpdateOperationsInput | number
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    vulnerabilityReport?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    targetName?: StringFieldUpdateOperationsInput | string
    targetDescription?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    systemAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    totalTests?: IntFieldUpdateOperationsInput | number
    vulnerabilities?: IntFieldUpdateOperationsInput | number
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    vulnerabilityReport?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FindingCreateInput = {
    id?: string
    vector: string
    prompt: string
    response: string
    technique?: string | null
    vulnerable?: boolean
    vulnerabilityType?: string | null
    severity?: string | null
    explanation?: string | null
    recommendations?: string | null
    createdAt?: Date | string
    assessment: AssessmentCreateNestedOneWithoutFindingsInput
  }

  export type FindingUncheckedCreateInput = {
    id?: string
    assessmentId: string
    vector: string
    prompt: string
    response: string
    technique?: string | null
    vulnerable?: boolean
    vulnerabilityType?: string | null
    severity?: string | null
    explanation?: string | null
    recommendations?: string | null
    createdAt?: Date | string
  }

  export type FindingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    vector?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    technique?: NullableStringFieldUpdateOperationsInput | string | null
    vulnerable?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessment?: AssessmentUpdateOneRequiredWithoutFindingsNestedInput
  }

  export type FindingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    vector?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    technique?: NullableStringFieldUpdateOperationsInput | string | null
    vulnerable?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FindingCreateManyInput = {
    id?: string
    assessmentId: string
    vector: string
    prompt: string
    response: string
    technique?: string | null
    vulnerable?: boolean
    vulnerabilityType?: string | null
    severity?: string | null
    explanation?: string | null
    recommendations?: string | null
    createdAt?: Date | string
  }

  export type FindingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    vector?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    technique?: NullableStringFieldUpdateOperationsInput | string | null
    vulnerable?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FindingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    vector?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    technique?: NullableStringFieldUpdateOperationsInput | string | null
    vulnerable?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExploitResultCreateInput = {
    id?: string
    exploitName: string
    description?: string | null
    stageNumber: number
    stagePurpose: string
    prompt: string
    response: string
    vulnerabilityFound?: boolean
    vulnerabilityType?: string | null
    severity?: string | null
    keyInformation?: string | null
    createdAt?: Date | string
    assessment: AssessmentCreateNestedOneWithoutExploitResultsInput
  }

  export type ExploitResultUncheckedCreateInput = {
    id?: string
    assessmentId: string
    exploitName: string
    description?: string | null
    stageNumber: number
    stagePurpose: string
    prompt: string
    response: string
    vulnerabilityFound?: boolean
    vulnerabilityType?: string | null
    severity?: string | null
    keyInformation?: string | null
    createdAt?: Date | string
  }

  export type ExploitResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    exploitName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stageNumber?: IntFieldUpdateOperationsInput | number
    stagePurpose?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    vulnerabilityFound?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    keyInformation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessment?: AssessmentUpdateOneRequiredWithoutExploitResultsNestedInput
  }

  export type ExploitResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    exploitName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stageNumber?: IntFieldUpdateOperationsInput | number
    stagePurpose?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    vulnerabilityFound?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    keyInformation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExploitResultCreateManyInput = {
    id?: string
    assessmentId: string
    exploitName: string
    description?: string | null
    stageNumber: number
    stagePurpose: string
    prompt: string
    response: string
    vulnerabilityFound?: boolean
    vulnerabilityType?: string | null
    severity?: string | null
    keyInformation?: string | null
    createdAt?: Date | string
  }

  export type ExploitResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    exploitName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stageNumber?: IntFieldUpdateOperationsInput | number
    stagePurpose?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    vulnerabilityFound?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    keyInformation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExploitResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    exploitName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stageNumber?: IntFieldUpdateOperationsInput | number
    stagePurpose?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    vulnerabilityFound?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    keyInformation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FindingListRelationFilter = {
    every?: FindingWhereInput
    some?: FindingWhereInput
    none?: FindingWhereInput
  }

  export type ExploitResultListRelationFilter = {
    every?: ExploitResultWhereInput
    some?: ExploitResultWhereInput
    none?: ExploitResultWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FindingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExploitResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    targetName?: SortOrder
    targetDescription?: SortOrder
    status?: SortOrder
    systemAnalysis?: SortOrder
    totalTests?: SortOrder
    vulnerabilities?: SortOrder
    securityScore?: SortOrder
    vulnerabilityReport?: SortOrder
    riskLevel?: SortOrder
    executionTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssessmentAvgOrderByAggregateInput = {
    totalTests?: SortOrder
    vulnerabilities?: SortOrder
    securityScore?: SortOrder
  }

  export type AssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    targetName?: SortOrder
    targetDescription?: SortOrder
    status?: SortOrder
    systemAnalysis?: SortOrder
    totalTests?: SortOrder
    vulnerabilities?: SortOrder
    securityScore?: SortOrder
    vulnerabilityReport?: SortOrder
    riskLevel?: SortOrder
    executionTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    targetName?: SortOrder
    targetDescription?: SortOrder
    status?: SortOrder
    systemAnalysis?: SortOrder
    totalTests?: SortOrder
    vulnerabilities?: SortOrder
    securityScore?: SortOrder
    vulnerabilityReport?: SortOrder
    riskLevel?: SortOrder
    executionTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssessmentSumOrderByAggregateInput = {
    totalTests?: SortOrder
    vulnerabilities?: SortOrder
    securityScore?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AssessmentRelationFilter = {
    is?: AssessmentWhereInput
    isNot?: AssessmentWhereInput
  }

  export type FindingCountOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    vector?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    technique?: SortOrder
    vulnerable?: SortOrder
    vulnerabilityType?: SortOrder
    severity?: SortOrder
    explanation?: SortOrder
    recommendations?: SortOrder
    createdAt?: SortOrder
  }

  export type FindingMaxOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    vector?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    technique?: SortOrder
    vulnerable?: SortOrder
    vulnerabilityType?: SortOrder
    severity?: SortOrder
    explanation?: SortOrder
    recommendations?: SortOrder
    createdAt?: SortOrder
  }

  export type FindingMinOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    vector?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    technique?: SortOrder
    vulnerable?: SortOrder
    vulnerabilityType?: SortOrder
    severity?: SortOrder
    explanation?: SortOrder
    recommendations?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ExploitResultCountOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    exploitName?: SortOrder
    description?: SortOrder
    stageNumber?: SortOrder
    stagePurpose?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    vulnerabilityFound?: SortOrder
    vulnerabilityType?: SortOrder
    severity?: SortOrder
    keyInformation?: SortOrder
    createdAt?: SortOrder
  }

  export type ExploitResultAvgOrderByAggregateInput = {
    stageNumber?: SortOrder
  }

  export type ExploitResultMaxOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    exploitName?: SortOrder
    description?: SortOrder
    stageNumber?: SortOrder
    stagePurpose?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    vulnerabilityFound?: SortOrder
    vulnerabilityType?: SortOrder
    severity?: SortOrder
    keyInformation?: SortOrder
    createdAt?: SortOrder
  }

  export type ExploitResultMinOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    exploitName?: SortOrder
    description?: SortOrder
    stageNumber?: SortOrder
    stagePurpose?: SortOrder
    prompt?: SortOrder
    response?: SortOrder
    vulnerabilityFound?: SortOrder
    vulnerabilityType?: SortOrder
    severity?: SortOrder
    keyInformation?: SortOrder
    createdAt?: SortOrder
  }

  export type ExploitResultSumOrderByAggregateInput = {
    stageNumber?: SortOrder
  }

  export type FindingCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<FindingCreateWithoutAssessmentInput, FindingUncheckedCreateWithoutAssessmentInput> | FindingCreateWithoutAssessmentInput[] | FindingUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: FindingCreateOrConnectWithoutAssessmentInput | FindingCreateOrConnectWithoutAssessmentInput[]
    createMany?: FindingCreateManyAssessmentInputEnvelope
    connect?: FindingWhereUniqueInput | FindingWhereUniqueInput[]
  }

  export type ExploitResultCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<ExploitResultCreateWithoutAssessmentInput, ExploitResultUncheckedCreateWithoutAssessmentInput> | ExploitResultCreateWithoutAssessmentInput[] | ExploitResultUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: ExploitResultCreateOrConnectWithoutAssessmentInput | ExploitResultCreateOrConnectWithoutAssessmentInput[]
    createMany?: ExploitResultCreateManyAssessmentInputEnvelope
    connect?: ExploitResultWhereUniqueInput | ExploitResultWhereUniqueInput[]
  }

  export type FindingUncheckedCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<FindingCreateWithoutAssessmentInput, FindingUncheckedCreateWithoutAssessmentInput> | FindingCreateWithoutAssessmentInput[] | FindingUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: FindingCreateOrConnectWithoutAssessmentInput | FindingCreateOrConnectWithoutAssessmentInput[]
    createMany?: FindingCreateManyAssessmentInputEnvelope
    connect?: FindingWhereUniqueInput | FindingWhereUniqueInput[]
  }

  export type ExploitResultUncheckedCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<ExploitResultCreateWithoutAssessmentInput, ExploitResultUncheckedCreateWithoutAssessmentInput> | ExploitResultCreateWithoutAssessmentInput[] | ExploitResultUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: ExploitResultCreateOrConnectWithoutAssessmentInput | ExploitResultCreateOrConnectWithoutAssessmentInput[]
    createMany?: ExploitResultCreateManyAssessmentInputEnvelope
    connect?: ExploitResultWhereUniqueInput | ExploitResultWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FindingUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<FindingCreateWithoutAssessmentInput, FindingUncheckedCreateWithoutAssessmentInput> | FindingCreateWithoutAssessmentInput[] | FindingUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: FindingCreateOrConnectWithoutAssessmentInput | FindingCreateOrConnectWithoutAssessmentInput[]
    upsert?: FindingUpsertWithWhereUniqueWithoutAssessmentInput | FindingUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: FindingCreateManyAssessmentInputEnvelope
    set?: FindingWhereUniqueInput | FindingWhereUniqueInput[]
    disconnect?: FindingWhereUniqueInput | FindingWhereUniqueInput[]
    delete?: FindingWhereUniqueInput | FindingWhereUniqueInput[]
    connect?: FindingWhereUniqueInput | FindingWhereUniqueInput[]
    update?: FindingUpdateWithWhereUniqueWithoutAssessmentInput | FindingUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: FindingUpdateManyWithWhereWithoutAssessmentInput | FindingUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: FindingScalarWhereInput | FindingScalarWhereInput[]
  }

  export type ExploitResultUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<ExploitResultCreateWithoutAssessmentInput, ExploitResultUncheckedCreateWithoutAssessmentInput> | ExploitResultCreateWithoutAssessmentInput[] | ExploitResultUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: ExploitResultCreateOrConnectWithoutAssessmentInput | ExploitResultCreateOrConnectWithoutAssessmentInput[]
    upsert?: ExploitResultUpsertWithWhereUniqueWithoutAssessmentInput | ExploitResultUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: ExploitResultCreateManyAssessmentInputEnvelope
    set?: ExploitResultWhereUniqueInput | ExploitResultWhereUniqueInput[]
    disconnect?: ExploitResultWhereUniqueInput | ExploitResultWhereUniqueInput[]
    delete?: ExploitResultWhereUniqueInput | ExploitResultWhereUniqueInput[]
    connect?: ExploitResultWhereUniqueInput | ExploitResultWhereUniqueInput[]
    update?: ExploitResultUpdateWithWhereUniqueWithoutAssessmentInput | ExploitResultUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: ExploitResultUpdateManyWithWhereWithoutAssessmentInput | ExploitResultUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: ExploitResultScalarWhereInput | ExploitResultScalarWhereInput[]
  }

  export type FindingUncheckedUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<FindingCreateWithoutAssessmentInput, FindingUncheckedCreateWithoutAssessmentInput> | FindingCreateWithoutAssessmentInput[] | FindingUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: FindingCreateOrConnectWithoutAssessmentInput | FindingCreateOrConnectWithoutAssessmentInput[]
    upsert?: FindingUpsertWithWhereUniqueWithoutAssessmentInput | FindingUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: FindingCreateManyAssessmentInputEnvelope
    set?: FindingWhereUniqueInput | FindingWhereUniqueInput[]
    disconnect?: FindingWhereUniqueInput | FindingWhereUniqueInput[]
    delete?: FindingWhereUniqueInput | FindingWhereUniqueInput[]
    connect?: FindingWhereUniqueInput | FindingWhereUniqueInput[]
    update?: FindingUpdateWithWhereUniqueWithoutAssessmentInput | FindingUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: FindingUpdateManyWithWhereWithoutAssessmentInput | FindingUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: FindingScalarWhereInput | FindingScalarWhereInput[]
  }

  export type ExploitResultUncheckedUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<ExploitResultCreateWithoutAssessmentInput, ExploitResultUncheckedCreateWithoutAssessmentInput> | ExploitResultCreateWithoutAssessmentInput[] | ExploitResultUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: ExploitResultCreateOrConnectWithoutAssessmentInput | ExploitResultCreateOrConnectWithoutAssessmentInput[]
    upsert?: ExploitResultUpsertWithWhereUniqueWithoutAssessmentInput | ExploitResultUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: ExploitResultCreateManyAssessmentInputEnvelope
    set?: ExploitResultWhereUniqueInput | ExploitResultWhereUniqueInput[]
    disconnect?: ExploitResultWhereUniqueInput | ExploitResultWhereUniqueInput[]
    delete?: ExploitResultWhereUniqueInput | ExploitResultWhereUniqueInput[]
    connect?: ExploitResultWhereUniqueInput | ExploitResultWhereUniqueInput[]
    update?: ExploitResultUpdateWithWhereUniqueWithoutAssessmentInput | ExploitResultUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: ExploitResultUpdateManyWithWhereWithoutAssessmentInput | ExploitResultUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: ExploitResultScalarWhereInput | ExploitResultScalarWhereInput[]
  }

  export type AssessmentCreateNestedOneWithoutFindingsInput = {
    create?: XOR<AssessmentCreateWithoutFindingsInput, AssessmentUncheckedCreateWithoutFindingsInput>
    connectOrCreate?: AssessmentCreateOrConnectWithoutFindingsInput
    connect?: AssessmentWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AssessmentUpdateOneRequiredWithoutFindingsNestedInput = {
    create?: XOR<AssessmentCreateWithoutFindingsInput, AssessmentUncheckedCreateWithoutFindingsInput>
    connectOrCreate?: AssessmentCreateOrConnectWithoutFindingsInput
    upsert?: AssessmentUpsertWithoutFindingsInput
    connect?: AssessmentWhereUniqueInput
    update?: XOR<XOR<AssessmentUpdateToOneWithWhereWithoutFindingsInput, AssessmentUpdateWithoutFindingsInput>, AssessmentUncheckedUpdateWithoutFindingsInput>
  }

  export type AssessmentCreateNestedOneWithoutExploitResultsInput = {
    create?: XOR<AssessmentCreateWithoutExploitResultsInput, AssessmentUncheckedCreateWithoutExploitResultsInput>
    connectOrCreate?: AssessmentCreateOrConnectWithoutExploitResultsInput
    connect?: AssessmentWhereUniqueInput
  }

  export type AssessmentUpdateOneRequiredWithoutExploitResultsNestedInput = {
    create?: XOR<AssessmentCreateWithoutExploitResultsInput, AssessmentUncheckedCreateWithoutExploitResultsInput>
    connectOrCreate?: AssessmentCreateOrConnectWithoutExploitResultsInput
    upsert?: AssessmentUpsertWithoutExploitResultsInput
    connect?: AssessmentWhereUniqueInput
    update?: XOR<XOR<AssessmentUpdateToOneWithWhereWithoutExploitResultsInput, AssessmentUpdateWithoutExploitResultsInput>, AssessmentUncheckedUpdateWithoutExploitResultsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FindingCreateWithoutAssessmentInput = {
    id?: string
    vector: string
    prompt: string
    response: string
    technique?: string | null
    vulnerable?: boolean
    vulnerabilityType?: string | null
    severity?: string | null
    explanation?: string | null
    recommendations?: string | null
    createdAt?: Date | string
  }

  export type FindingUncheckedCreateWithoutAssessmentInput = {
    id?: string
    vector: string
    prompt: string
    response: string
    technique?: string | null
    vulnerable?: boolean
    vulnerabilityType?: string | null
    severity?: string | null
    explanation?: string | null
    recommendations?: string | null
    createdAt?: Date | string
  }

  export type FindingCreateOrConnectWithoutAssessmentInput = {
    where: FindingWhereUniqueInput
    create: XOR<FindingCreateWithoutAssessmentInput, FindingUncheckedCreateWithoutAssessmentInput>
  }

  export type FindingCreateManyAssessmentInputEnvelope = {
    data: FindingCreateManyAssessmentInput | FindingCreateManyAssessmentInput[]
  }

  export type ExploitResultCreateWithoutAssessmentInput = {
    id?: string
    exploitName: string
    description?: string | null
    stageNumber: number
    stagePurpose: string
    prompt: string
    response: string
    vulnerabilityFound?: boolean
    vulnerabilityType?: string | null
    severity?: string | null
    keyInformation?: string | null
    createdAt?: Date | string
  }

  export type ExploitResultUncheckedCreateWithoutAssessmentInput = {
    id?: string
    exploitName: string
    description?: string | null
    stageNumber: number
    stagePurpose: string
    prompt: string
    response: string
    vulnerabilityFound?: boolean
    vulnerabilityType?: string | null
    severity?: string | null
    keyInformation?: string | null
    createdAt?: Date | string
  }

  export type ExploitResultCreateOrConnectWithoutAssessmentInput = {
    where: ExploitResultWhereUniqueInput
    create: XOR<ExploitResultCreateWithoutAssessmentInput, ExploitResultUncheckedCreateWithoutAssessmentInput>
  }

  export type ExploitResultCreateManyAssessmentInputEnvelope = {
    data: ExploitResultCreateManyAssessmentInput | ExploitResultCreateManyAssessmentInput[]
  }

  export type FindingUpsertWithWhereUniqueWithoutAssessmentInput = {
    where: FindingWhereUniqueInput
    update: XOR<FindingUpdateWithoutAssessmentInput, FindingUncheckedUpdateWithoutAssessmentInput>
    create: XOR<FindingCreateWithoutAssessmentInput, FindingUncheckedCreateWithoutAssessmentInput>
  }

  export type FindingUpdateWithWhereUniqueWithoutAssessmentInput = {
    where: FindingWhereUniqueInput
    data: XOR<FindingUpdateWithoutAssessmentInput, FindingUncheckedUpdateWithoutAssessmentInput>
  }

  export type FindingUpdateManyWithWhereWithoutAssessmentInput = {
    where: FindingScalarWhereInput
    data: XOR<FindingUpdateManyMutationInput, FindingUncheckedUpdateManyWithoutAssessmentInput>
  }

  export type FindingScalarWhereInput = {
    AND?: FindingScalarWhereInput | FindingScalarWhereInput[]
    OR?: FindingScalarWhereInput[]
    NOT?: FindingScalarWhereInput | FindingScalarWhereInput[]
    id?: StringFilter<"Finding"> | string
    assessmentId?: StringFilter<"Finding"> | string
    vector?: StringFilter<"Finding"> | string
    prompt?: StringFilter<"Finding"> | string
    response?: StringFilter<"Finding"> | string
    technique?: StringNullableFilter<"Finding"> | string | null
    vulnerable?: BoolFilter<"Finding"> | boolean
    vulnerabilityType?: StringNullableFilter<"Finding"> | string | null
    severity?: StringNullableFilter<"Finding"> | string | null
    explanation?: StringNullableFilter<"Finding"> | string | null
    recommendations?: StringNullableFilter<"Finding"> | string | null
    createdAt?: DateTimeFilter<"Finding"> | Date | string
  }

  export type ExploitResultUpsertWithWhereUniqueWithoutAssessmentInput = {
    where: ExploitResultWhereUniqueInput
    update: XOR<ExploitResultUpdateWithoutAssessmentInput, ExploitResultUncheckedUpdateWithoutAssessmentInput>
    create: XOR<ExploitResultCreateWithoutAssessmentInput, ExploitResultUncheckedCreateWithoutAssessmentInput>
  }

  export type ExploitResultUpdateWithWhereUniqueWithoutAssessmentInput = {
    where: ExploitResultWhereUniqueInput
    data: XOR<ExploitResultUpdateWithoutAssessmentInput, ExploitResultUncheckedUpdateWithoutAssessmentInput>
  }

  export type ExploitResultUpdateManyWithWhereWithoutAssessmentInput = {
    where: ExploitResultScalarWhereInput
    data: XOR<ExploitResultUpdateManyMutationInput, ExploitResultUncheckedUpdateManyWithoutAssessmentInput>
  }

  export type ExploitResultScalarWhereInput = {
    AND?: ExploitResultScalarWhereInput | ExploitResultScalarWhereInput[]
    OR?: ExploitResultScalarWhereInput[]
    NOT?: ExploitResultScalarWhereInput | ExploitResultScalarWhereInput[]
    id?: StringFilter<"ExploitResult"> | string
    assessmentId?: StringFilter<"ExploitResult"> | string
    exploitName?: StringFilter<"ExploitResult"> | string
    description?: StringNullableFilter<"ExploitResult"> | string | null
    stageNumber?: IntFilter<"ExploitResult"> | number
    stagePurpose?: StringFilter<"ExploitResult"> | string
    prompt?: StringFilter<"ExploitResult"> | string
    response?: StringFilter<"ExploitResult"> | string
    vulnerabilityFound?: BoolFilter<"ExploitResult"> | boolean
    vulnerabilityType?: StringNullableFilter<"ExploitResult"> | string | null
    severity?: StringNullableFilter<"ExploitResult"> | string | null
    keyInformation?: StringNullableFilter<"ExploitResult"> | string | null
    createdAt?: DateTimeFilter<"ExploitResult"> | Date | string
  }

  export type AssessmentCreateWithoutFindingsInput = {
    id?: string
    userId: string
    targetName: string
    targetDescription?: string | null
    status?: string
    systemAnalysis?: string | null
    totalTests?: number
    vulnerabilities?: number
    securityScore?: number | null
    vulnerabilityReport?: string | null
    riskLevel?: string | null
    executionTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    exploitResults?: ExploitResultCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentUncheckedCreateWithoutFindingsInput = {
    id?: string
    userId: string
    targetName: string
    targetDescription?: string | null
    status?: string
    systemAnalysis?: string | null
    totalTests?: number
    vulnerabilities?: number
    securityScore?: number | null
    vulnerabilityReport?: string | null
    riskLevel?: string | null
    executionTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    exploitResults?: ExploitResultUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentCreateOrConnectWithoutFindingsInput = {
    where: AssessmentWhereUniqueInput
    create: XOR<AssessmentCreateWithoutFindingsInput, AssessmentUncheckedCreateWithoutFindingsInput>
  }

  export type AssessmentUpsertWithoutFindingsInput = {
    update: XOR<AssessmentUpdateWithoutFindingsInput, AssessmentUncheckedUpdateWithoutFindingsInput>
    create: XOR<AssessmentCreateWithoutFindingsInput, AssessmentUncheckedCreateWithoutFindingsInput>
    where?: AssessmentWhereInput
  }

  export type AssessmentUpdateToOneWithWhereWithoutFindingsInput = {
    where?: AssessmentWhereInput
    data: XOR<AssessmentUpdateWithoutFindingsInput, AssessmentUncheckedUpdateWithoutFindingsInput>
  }

  export type AssessmentUpdateWithoutFindingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    targetName?: StringFieldUpdateOperationsInput | string
    targetDescription?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    systemAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    totalTests?: IntFieldUpdateOperationsInput | number
    vulnerabilities?: IntFieldUpdateOperationsInput | number
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    vulnerabilityReport?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exploitResults?: ExploitResultUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentUncheckedUpdateWithoutFindingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    targetName?: StringFieldUpdateOperationsInput | string
    targetDescription?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    systemAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    totalTests?: IntFieldUpdateOperationsInput | number
    vulnerabilities?: IntFieldUpdateOperationsInput | number
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    vulnerabilityReport?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exploitResults?: ExploitResultUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentCreateWithoutExploitResultsInput = {
    id?: string
    userId: string
    targetName: string
    targetDescription?: string | null
    status?: string
    systemAnalysis?: string | null
    totalTests?: number
    vulnerabilities?: number
    securityScore?: number | null
    vulnerabilityReport?: string | null
    riskLevel?: string | null
    executionTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    findings?: FindingCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentUncheckedCreateWithoutExploitResultsInput = {
    id?: string
    userId: string
    targetName: string
    targetDescription?: string | null
    status?: string
    systemAnalysis?: string | null
    totalTests?: number
    vulnerabilities?: number
    securityScore?: number | null
    vulnerabilityReport?: string | null
    riskLevel?: string | null
    executionTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    findings?: FindingUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentCreateOrConnectWithoutExploitResultsInput = {
    where: AssessmentWhereUniqueInput
    create: XOR<AssessmentCreateWithoutExploitResultsInput, AssessmentUncheckedCreateWithoutExploitResultsInput>
  }

  export type AssessmentUpsertWithoutExploitResultsInput = {
    update: XOR<AssessmentUpdateWithoutExploitResultsInput, AssessmentUncheckedUpdateWithoutExploitResultsInput>
    create: XOR<AssessmentCreateWithoutExploitResultsInput, AssessmentUncheckedCreateWithoutExploitResultsInput>
    where?: AssessmentWhereInput
  }

  export type AssessmentUpdateToOneWithWhereWithoutExploitResultsInput = {
    where?: AssessmentWhereInput
    data: XOR<AssessmentUpdateWithoutExploitResultsInput, AssessmentUncheckedUpdateWithoutExploitResultsInput>
  }

  export type AssessmentUpdateWithoutExploitResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    targetName?: StringFieldUpdateOperationsInput | string
    targetDescription?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    systemAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    totalTests?: IntFieldUpdateOperationsInput | number
    vulnerabilities?: IntFieldUpdateOperationsInput | number
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    vulnerabilityReport?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    findings?: FindingUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentUncheckedUpdateWithoutExploitResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    targetName?: StringFieldUpdateOperationsInput | string
    targetDescription?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    systemAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    totalTests?: IntFieldUpdateOperationsInput | number
    vulnerabilities?: IntFieldUpdateOperationsInput | number
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    vulnerabilityReport?: NullableStringFieldUpdateOperationsInput | string | null
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    findings?: FindingUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type FindingCreateManyAssessmentInput = {
    id?: string
    vector: string
    prompt: string
    response: string
    technique?: string | null
    vulnerable?: boolean
    vulnerabilityType?: string | null
    severity?: string | null
    explanation?: string | null
    recommendations?: string | null
    createdAt?: Date | string
  }

  export type ExploitResultCreateManyAssessmentInput = {
    id?: string
    exploitName: string
    description?: string | null
    stageNumber: number
    stagePurpose: string
    prompt: string
    response: string
    vulnerabilityFound?: boolean
    vulnerabilityType?: string | null
    severity?: string | null
    keyInformation?: string | null
    createdAt?: Date | string
  }

  export type FindingUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    vector?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    technique?: NullableStringFieldUpdateOperationsInput | string | null
    vulnerable?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FindingUncheckedUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    vector?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    technique?: NullableStringFieldUpdateOperationsInput | string | null
    vulnerable?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FindingUncheckedUpdateManyWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    vector?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    technique?: NullableStringFieldUpdateOperationsInput | string | null
    vulnerable?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExploitResultUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    exploitName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stageNumber?: IntFieldUpdateOperationsInput | number
    stagePurpose?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    vulnerabilityFound?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    keyInformation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExploitResultUncheckedUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    exploitName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stageNumber?: IntFieldUpdateOperationsInput | number
    stagePurpose?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    vulnerabilityFound?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    keyInformation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExploitResultUncheckedUpdateManyWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    exploitName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stageNumber?: IntFieldUpdateOperationsInput | number
    stagePurpose?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    vulnerabilityFound?: BoolFieldUpdateOperationsInput | boolean
    vulnerabilityType?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    keyInformation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AssessmentCountOutputTypeDefaultArgs instead
     */
    export type AssessmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssessmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssessmentDefaultArgs instead
     */
    export type AssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssessmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FindingDefaultArgs instead
     */
    export type FindingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FindingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExploitResultDefaultArgs instead
     */
    export type ExploitResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExploitResultDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}