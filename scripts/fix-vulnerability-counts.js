const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function fixVulnerabilityCounts() {
  try {
    console.log('🔧 Fixing vulnerability count mismatches...')
    
    // Get all assessments
    const assessments = await prisma.assessment.findMany({
      include: {
        findings: true
      }
    })
    
    console.log(`Found ${assessments.length} assessments to check`)
    
    for (const assessment of assessments) {
      const actualVulnerabilities = assessment.findings.filter(f => f.vulnerable).length
      const storedVulnerabilities = assessment.vulnerabilities
      
      if (actualVulnerabilities !== storedVulnerabilities) {
        console.log(`\n❌ Mismatch found in ${assessment.targetName} (${assessment.id}):`)
        console.log(`   Stored: ${storedVulnerabilities} vulnerabilities`)
        console.log(`   Actual: ${actualVulnerabilities} vulnerabilities`)
        
        // Calculate correct security score
        const totalTests = assessment.findings.length
        const newSecurityScore = totalTests > 0 ? Math.max(0, 100 - (actualVulnerabilities * 100 / totalTests)) : 100
        
        // Update the assessment
        await prisma.assessment.update({
          where: { id: assessment.id },
          data: {
            vulnerabilities: actualVulnerabilities,
            totalTests: totalTests,
            securityScore: newSecurityScore
          }
        })
        
        console.log(`   ✅ Updated: ${actualVulnerabilities} vulnerabilities, ${totalTests} tests, ${newSecurityScore.toFixed(1)} score`)
      } else {
        console.log(`✅ ${assessment.targetName}: counts match (${actualVulnerabilities} vulnerabilities)`)
      }
    }
    
    console.log('\n🎉 Vulnerability count fix completed!')
    
  } catch (error) {
    console.error('❌ Error fixing vulnerability counts:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixVulnerabilityCounts()